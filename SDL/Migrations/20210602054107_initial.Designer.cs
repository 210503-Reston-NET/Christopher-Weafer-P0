// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SDL;

namespace SDL.Migrations
{
    [DbContext(typeof(BakeryDBContext))]
    [Migration("20210602054107_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("SModel.Bakery", b =>
                {
                    b.Property<int>("BakeryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BakeryName")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("BakeryId");

                    b.ToTable("Bakeries");

                    b.HasData(
                        new
                        {
                            BakeryId = 1,
                            BakeryName = "Ben's Bakery,",
                            City = "Pasadena",
                            State = "CA"
                        },
                        new
                        {
                            BakeryId = 2,
                            BakeryName = "Suzies",
                            City = "Pheonix",
                            State = "AZ"
                        },
                        new
                        {
                            BakeryId = 3,
                            BakeryName = "SD Breads & More",
                            City = "El Paso",
                            State = "TX"
                        },
                        new
                        {
                            BakeryId = 4,
                            BakeryName = "Pita Palace",
                            City = "Chicago",
                            State = "IL"
                        },
                        new
                        {
                            BakeryId = 5,
                            BakeryName = "Wheat Workers",
                            City = "Seattle",
                            State = "WA"
                        },
                        new
                        {
                            BakeryId = 6,
                            BakeryName = "Bread Store",
                            City = "Portland",
                            State = "OR"
                        },
                        new
                        {
                            BakeryId = 7,
                            BakeryName = "Chomps",
                            City = "New York",
                            State = "NY"
                        },
                        new
                        {
                            BakeryId = 8,
                            BakeryName = "Matzo & More",
                            City = "Boston",
                            State = "MA"
                        },
                        new
                        {
                            BakeryId = 9,
                            BakeryName = "Desert Farms",
                            City = "Columbia",
                            State = "SC"
                        });
                });

            modelBuilder.Entity("SModel.BakeryInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BakeryInventories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            Stock = 3,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 2,
                            Stock = 1,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 3,
                            ProductId = 3,
                            Stock = 2,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 4,
                            ProductId = 4,
                            Stock = 4,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 5,
                            ProductId = 5,
                            Stock = 5,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 6,
                            ProductId = 6,
                            Stock = 1,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 7,
                            ProductId = 7,
                            Stock = 1,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 8,
                            ProductId = 8,
                            Stock = 6,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 9,
                            ProductId = 9,
                            Stock = 4,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 10,
                            ProductId = 10,
                            Stock = 8,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 11,
                            ProductId = 15,
                            Stock = 2,
                            StoreId = 1
                        });
                });

            modelBuilder.Entity("SModel.Bread", b =>
                {
                    b.Property<int>("BreadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BakeryId")
                        .HasColumnType("integer");

                    b.Property<string>("Breadtype")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.HasKey("BreadId");

                    b.HasIndex("BakeryId");

                    b.ToTable("Breads");

                    b.HasData(
                        new
                        {
                            BreadId = 1,
                            Breadtype = "Baguette",
                            Price = 4.0,
                            Stock = 0
                        },
                        new
                        {
                            BreadId = 2,
                            Breadtype = "Brioche",
                            Price = 3.79,
                            Stock = 0
                        },
                        new
                        {
                            BreadId = 3,
                            Breadtype = "Bagel",
                            Price = 2.0,
                            Stock = 0
                        },
                        new
                        {
                            BreadId = 4,
                            Breadtype = "Sourdough",
                            Price = 3.6000000000000001,
                            Stock = 0
                        },
                        new
                        {
                            BreadId = 5,
                            Breadtype = "Rye",
                            Price = 3.0,
                            Stock = 0
                        },
                        new
                        {
                            BreadId = 6,
                            Breadtype = "Pita",
                            Price = 2.5,
                            Stock = 0
                        },
                        new
                        {
                            BreadId = 7,
                            Breadtype = "Multigrain",
                            Price = 2.5,
                            Stock = 0
                        },
                        new
                        {
                            BreadId = 8,
                            Breadtype = "Focaccia",
                            Price = 3.1200000000000001,
                            Stock = 0
                        },
                        new
                        {
                            BreadId = 9,
                            Breadtype = "White",
                            Price = 2.5,
                            Stock = 0
                        },
                        new
                        {
                            BreadId = 10,
                            Breadtype = "Wheat",
                            Price = 2.5,
                            Stock = 0
                        },
                        new
                        {
                            BreadId = 11,
                            Breadtype = "English Muffin",
                            Price = 1.5,
                            Stock = 0
                        },
                        new
                        {
                            BreadId = 12,
                            Breadtype = "Matzo",
                            Price = 2.0,
                            Stock = 0
                        },
                        new
                        {
                            BreadId = 13,
                            Breadtype = "Tortilla",
                            Price = 2.5,
                            Stock = 0
                        },
                        new
                        {
                            BreadId = 14,
                            Breadtype = "Banana",
                            Price = 4.5,
                            Stock = 0
                        },
                        new
                        {
                            BreadId = 15,
                            Breadtype = "BreadStick",
                            Price = 0.75,
                            Stock = 0
                        },
                        new
                        {
                            BreadId = 16,
                            Breadtype = "Corn Bread",
                            Price = 2.0,
                            Stock = 0
                        },
                        new
                        {
                            BreadId = 17,
                            Breadtype = "Pumpernickel",
                            Price = 3.5,
                            Stock = 0
                        });
                });

            modelBuilder.Entity("SModel.BreadBatch", b =>
                {
                    b.Property<int>("BreadBatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BreadQuantity")
                        .HasColumnType("integer");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("BreadBatchId");

                    b.ToTable("BreadBatches");
                });

            modelBuilder.Entity("SModel.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("SModel.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BakeryId")
                        .HasColumnType("integer");

                    b.Property<int>("BreadCount")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int?>("LoafBreadId")
                        .HasColumnType("integer");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LoafBreadId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SModel.Bread", b =>
                {
                    b.HasOne("SModel.Bakery", null)
                        .WithMany("Stock")
                        .HasForeignKey("BakeryId");
                });

            modelBuilder.Entity("SModel.Orders", b =>
                {
                    b.HasOne("SModel.Bakery", "bakery")
                        .WithMany("LocationOrders")
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SModel.Customer", null)
                        .WithMany("OrderList")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SModel.Bread", "Loaf")
                        .WithMany()
                        .HasForeignKey("LoafBreadId");

                    b.Navigation("bakery");

                    b.Navigation("Loaf");
                });

            modelBuilder.Entity("SModel.Bakery", b =>
                {
                    b.Navigation("LocationOrders");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("SModel.Customer", b =>
                {
                    b.Navigation("OrderList");
                });
#pragma warning restore 612, 618
        }
    }
}
